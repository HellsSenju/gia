{"version":3,"sources":["script.js"],"names":["container","document","getElementById","fetchWeather","proxy","apiUrl","fullUrl","encodeURIComponent","fetch","response","json","data","initDate","parseInit","init","console","log","innerHTML","forecast","dataseries","forEach","entry","forecastDate","Date","getTime","timepoint","formattedDate","formatDate","formattedTime","formatTime","temp","temp2m","description","translateWeather","weather","card","createElement","className","appendChild","error","initStr","year","parseInt","slice","month","day","hour","UTC","dateObj","dd","String","getUTCDate","padStart","mm","getUTCMonth","yyyy","getUTCFullYear","hh","getUTCHours","getUTCMinutes","code","map","clearday","pcloudy","mcloudy","cloudy","rain","lightrain","snow","ts","fog"],"mappings":"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","sourcesContent":["const container = document.getElementById('weather-container');\r\n\r\n// python -m http.server 8000 -–ø–æ–¥–Ω–∏–º–∞–µ–º —Å–µ—Ä–≤–µ—Ä\r\n\r\nasync function fetchWeather() {\r\n    try {\r\n        const proxy = 'https://corsproxy.io/?';\r\n        const apiUrl = 'https://www.7timer.info/bin/api.pl?lon=48.4&lat=54.3&product=civil&output=json';\r\n        const fullUrl = proxy + encodeURIComponent(apiUrl);\r\n\r\n        const response = await fetch(fullUrl);\r\n        const data = await response.json();\r\n        \r\n        const initDate = parseInit(data.init);\r\n        console.log(initDate)\r\n\r\n        container.innerHTML = '';\r\n\r\n        // const forecast = data.dataseries.slice(0, 8); // 24 —á–∞—Å–∞\r\n        const forecast = data.dataseries; // 24 —á–∞—Å–∞\r\n\r\n        forecast.forEach(entry => {\r\n            // console.log(entry)\r\n\r\n            const forecastDate = new Date(initDate.getTime() + entry.timepoint * 60 * 60 * 1000);\r\n            console.log(new Date(initDate.getTime()))\r\n            console.log(new Date(initDate.getTime() + entry.timepoint * 60 * 60 * 1000))\r\n            const formattedDate = formatDate(forecastDate);\r\n            const formattedTime = formatTime(forecastDate);\r\n\r\n            const temp = `${entry.temp2m}¬∞C`;\r\n            const description = translateWeather(entry.weather);\r\n\r\n            const card = document.createElement('div');\r\n            card.className = 'weather-card';\r\n            card.innerHTML = `\r\n                <h2>${formattedDate}</h2>\r\n                <p class=\"time\">${formattedTime}</p>\r\n                <div class=\"temp\">${temp}</div>\r\n                <div class=\"desc\">${description}</div>\r\n            `;\r\n            container.appendChild(card);\r\n        });\r\n    } catch (error) {\r\n        container.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.</p>';\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n// üïí –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ init –≤ –æ–±—ä–µ–∫—Ç Date\r\nfunction parseInit(initStr) {\r\n    const year = parseInt(initStr.slice(0, 4));\r\n    const month = parseInt(initStr.slice(4, 6)) - 1; // –º–µ—Å—è—Ü –æ—Ç 0\r\n    const day = parseInt(initStr.slice(6, 8));\r\n    const hour = parseInt(initStr.slice(8, 10));\r\n    return new Date(Date.UTC(year, month, day, hour));\r\n}\r\n\r\n// üìÜ –§–æ—Ä–º–∞—Ç dd.MM.yyyy\r\nfunction formatDate(dateObj) {\r\n    const dd = String(dateObj.getUTCDate()).padStart(2, '0');\r\n    const mm = String(dateObj.getUTCMonth() + 1).padStart(2, '0');\r\n    const yyyy = dateObj.getUTCFullYear();\r\n    return `${dd}.${mm}.${yyyy}`;\r\n}\r\n\r\nfunction formatTime(dateObj) {\r\n    const hh = String(dateObj.getUTCHours()).padStart(2, '0');\r\n    const mm = String(dateObj.getUTCMinutes()).padStart(2, '0');\r\n    return `${hh}:${mm}`;\r\n}\r\n\r\n// üå¶Ô∏è –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–≥–æ–¥—ã\r\nfunction translateWeather(code) {\r\n    const map = {\r\n        clearday: '–Ø—Å–Ω–æ',\r\n        pcloudy: '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ',\r\n        mcloudy: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',\r\n        cloudy: '–ü–∞—Å–º—É—Ä–Ω–æ',\r\n        rain: '–î–æ–∂–¥—å',\r\n        lightrain: '–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å',\r\n        snow: '–°–Ω–µ–≥',\r\n        ts: '–ì—Ä–æ–∑–∞',\r\n        fog: '–¢—É–º–∞–Ω'\r\n    };\r\n    return map[code] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';\r\n}\r\n\r\nfetchWeather();\r\n"],"file":"script.dev.js"}